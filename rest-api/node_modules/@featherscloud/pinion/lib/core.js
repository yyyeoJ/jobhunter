import { spawn } from 'child_process';
import inquirer from 'inquirer';
import chalk from 'chalk';
import { loadModule } from './utils.js';
const { prompt } = inquirer;
const { yellow, red, blue } = chalk;
export class BasicLogger {
    constructor() {
        this.logger = console;
        this.previousNotice = '';
    }
    warn(msg) {
        this.logger.log(yellow(`    ${msg}`));
    }
    error(msg) {
        this.logger.log(red(msg));
    }
    log(msg) {
        this.logger.log(msg);
    }
    notice(msg) {
        if (this.previousNotice !== msg) {
            this.logger.log(blue(`    ${msg}`));
            this.previousNotice = msg;
        }
    }
}
/**
 * Returns the value for a callable which can either be a plain value or a
 * callback function that takes the context and returns the value.
 *
 * @param callable A plain value or a callback function that returns the value
 * @param context The current context object
 * @returns The final value
 */
export const getCallable = async (callable, context) => typeof callable === 'function' ? callable(context) : callable;
export const mapCallables = (callables, context) => Promise.all(callables.map((callable) => getCallable(callable, context)));
/**
 * Returns a new Pinion configuration object.
 *
 * @param initialConfig Any customized Pinion configuration settings
 * @returns
 */
export const getConfig = (initialConfig) => ({
    prompt,
    logger: new BasicLogger(),
    cwd: process.cwd(),
    force: false,
    trace: [],
    exec: (command, args, options) => {
        const child = spawn(command, args, {
            stdio: 'inherit',
            shell: true,
            ...options
        });
        return new Promise((resolve, reject) => {
            child.once('exit', (code) => (code === 0 ? resolve(code) : reject(code)));
        });
    },
    ...initialConfig
});
/**
 * Returns a new Pinion context that can be passed to a generator.
 *
 * @param initialCtx The initial context data
 * @param initialConfig The initial Pinion configuration
 * @returns The initialized Pinion context.
 */
export const getContext = (initialCtx, initialConfig = {}) => {
    const pinion = getConfig(initialConfig);
    return {
        cwd: pinion.cwd,
        argv: [],
        ...initialCtx,
        pinion
    };
};
/**
 * Returns a Promise of the initial context
 * @param initialContext
 * @returns
 * @deprecated Use `Promise.resolve(context)` instead
 */
export const generator = async (initialContext) => initialContext;
export const runModule = async (file, ctx) => {
    const { generate } = await loadModule(file);
    return generate(ctx);
};
//# sourceMappingURL=core.js.map