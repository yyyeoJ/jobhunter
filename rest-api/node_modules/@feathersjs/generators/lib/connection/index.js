import { dirname } from 'path';
import { runGenerator, prompt, mergeJSON, toFile, when } from '@featherscloud/pinion';
import { fileURLToPath } from 'url';
import chalk from 'chalk';
import { install, getDatabaseAdapter, addVersions, checkPreconditions, initializeBaseContext } from '../commons.js';
// Set __dirname in es module
const __dirname = dirname(fileURLToPath(import.meta.url));
export const defaultConnectionString = (type, name) => {
    const connectionStrings = {
        mongodb: `mongodb://127.0.0.1:27017/${name}`,
        mysql: `mysql://root:@localhost:3306/${name}`,
        postgresql: `postgres://postgres:@localhost:5432/${name}`,
        sqlite: `${name}.sqlite`,
        mssql: `mssql://root:password@localhost:1433/${name}`,
        other: ''
    };
    return connectionStrings[type];
};
export const prompts = ({ database, connectionString, pkg, name }) => [
    {
        name: 'database',
        type: 'list',
        when: !database,
        message: 'Which database are you connecting to?',
        suffix: chalk.grey(' Databases can be added at any time'),
        choices: [
            { value: 'sqlite', name: 'SQLite' },
            { value: 'mongodb', name: 'MongoDB' },
            { value: 'postgresql', name: 'PostgreSQL' },
            { value: 'mysql', name: 'MySQL/MariaDB' },
            { value: 'mssql', name: 'Microsoft SQL' },
            {
                value: 'other',
                name: `Another database ${chalk.grey('(not configured automatically, use with custom services)')}`
            }
        ]
    },
    {
        name: 'connectionString',
        type: 'input',
        when: (answers) => !connectionString && database !== 'other' && answers.database !== 'other',
        message: 'Enter your database connection string',
        default: (answers) => defaultConnectionString(answers.database, answers.name || name || pkg.name)
    }
];
export const DATABASE_CLIENTS = {
    mongodb: 'mongodb',
    sqlite: 'sqlite3',
    postgresql: 'pg',
    mysql: 'mysql',
    mssql: 'mssql'
};
export const getDatabaseClient = (database) => database === 'other' ? null : DATABASE_CLIENTS[database];
export const generate = (ctx) => Promise.resolve(ctx)
    .then(initializeBaseContext())
    .then(checkPreconditions())
    .then(prompt(prompts))
    .then((ctx) => ctx)
    .then(when((ctx) => ctx.database !== 'other', runGenerator(__dirname, 'templates', ({ database }) => `${getDatabaseAdapter(database)}.tpl.js`), mergeJSON(({ connectionString, database }) => getDatabaseAdapter(database) === 'knex'
    ? {
        [database]: {
            client: getDatabaseClient(database),
            connection: connectionString,
            ...(database === 'sqlite' ? { useNullAsDefault: true } : {})
        }
    }
    : {
        [database]: connectionString
    }, toFile('config', 'default.json')), async (ctx) => {
    const dependencies = [];
    const adapter = getDatabaseAdapter(ctx.database);
    const dbClient = getDatabaseClient(ctx.database);
    dependencies.push(`@feathersjs/${adapter}`);
    if (adapter === 'knex') {
        dependencies.push('knex');
    }
    dependencies.push(dbClient);
    if (ctx.dependencies) {
        return {
            ...ctx,
            dependencies: [...ctx.dependencies, ...dependencies]
        };
    }
    return install(addVersions(dependencies, ctx.dependencyVersions), false, ctx.feathers.packager)(ctx);
}));
//# sourceMappingURL=index.js.map