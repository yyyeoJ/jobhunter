import { toFile, after, before, when } from '@featherscloud/pinion';
import { fileExists, injectSource } from '../../commons.js';
const importTemplate = ({ upperName, folder, fileName, camelName }) => /* ts */ `
import { ${camelName}Client } from './services/${folder.join('/')}/${fileName}.shared'
export type {
  ${upperName},
  ${upperName}Data,
  ${upperName}Query,
  ${upperName}Patch
} from './services/${folder.join('/')}/${fileName}.shared'
`;
const registrationTemplate = ({ camelName }) => `  client.configure(${camelName}Client)`;
const toClientFile = toFile(({ lib }) => [lib, 'client']);
export const generate = async (ctx) => Promise.resolve(ctx).then(when(({ lib, language }) => fileExists(lib, `client.${language}`), injectSource(registrationTemplate, before('return client'), toClientFile), injectSource(importTemplate, after(({ language }) => language === 'ts' ? 'import type { AuthenticationClientOptions }' : 'import authenticationClient'), toClientFile)));
//# sourceMappingURL=client.tpl.js.map